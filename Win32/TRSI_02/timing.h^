#ifndef __TIMINGH__
#define __TIMINGH__

#define WIN32_LEAN_AND_MEAN
#include <windows.h>

struct ticker_t
{
   ticker_t() : hasHigh(1) {}
   void		Init(void);
   void		Update(void);
   float	Passed(void);			// in milliseconds
   float	FramePerSec(void)	{ return frameSec; }

protected:
   int hasHigh;
   
   union
   {
      LARGE_INTEGER pqcNow;
      DWORD gtcNow;
   };

   float	LastPassed;
   float	res; 
   float	frameCnt;
   float	frameTot;
   float	frameSec;
};


/*-------------------------------------------------------------*/
void ticker_t::Init(void)
/*-------------------------------------------------------------*/
{
   LARGE_INTEGER freq;

   if (QueryPerformanceFrequency(&freq))
   {
      QueryPerformanceCounter(&pqcNow);
      res = (float) (1.0f / (double) freq.QuadPart);
   }  
   else
   {
      hasHigh = 0;
      gtcNow = GetTickCount();
   }

   LastPassed = 0.0f;
   frameCnt = 0.0f;
   frameTot = 0.0f;
   frameSec = 0.0f;
}


/*-------------------------------------------------------------*/
void ticker_t::Update(void)
/*-------------------------------------------------------------*/
{
   if (hasHigh)
      QueryPerformanceCounter(&pqcNow);
   else  
      gtcNow = GetTickCount();
}


/*-------------------------------------------------------------*/
float ticker_t::Passed(void)
/*-------------------------------------------------------------*/
{
   if (hasHigh)
   {
      LARGE_INTEGER temp;
      QueryPerformanceCounter(&temp);

      LastPassed = ((temp.QuadPart - pqcNow.QuadPart) * res * 1000);
   }
   else
      LastPassed = ((float) (GetTickCount() - gtcNow));


	frameTot++;
	frameCnt += LastPassed;
	
	if (frameCnt > 1000.0f) 
	{
		frameSec = (frameTot * 1000) / frameCnt;
		frameTot = 0.0f;
		frameCnt -= 1000.0f;
	}

	Update();

	return LastPassed;
}


#endif


